apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//如果runtime代码有变化,生成fastdex-runtime.dex放进buildSrc/src/main/resources/fastdex-runtime.dex
project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def variantName = variant.name.capitalize()
        Task generateDexTask = project.tasks.create("generateRuntimeDexFor${variantName}")
        generateDexTask.group = 'fastdex'
        generateDexTask.doFirst {
            project.copy {
                from project.zipTree(project.file("build/outputs/aar/${project.name}-${variantName}.aar"))
                into project.file("build/intermediates/fastdex/${variantName}")
            }

            String sdkDirectory = project.android.getSdkDirectory()
            if (sdkDirectory.contains("\\")) {
                sdkDirectory = sdkDirectory.replace("\\", "/");
            }
            String dxcmd = ""
            File dx = new File(sdkDirectory,"build-tools${File.separator}${project.android.getBuildToolsVersion()}${File.separator}dx")
            dxcmd = dx.absolutePath
            if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
                dxcmd =  "${dxcmd}.bat"
            }
            project.file("build/outputs/fastdex/${variantName.toLowerCase()}").mkdirs()
            dxcmd = "${dxcmd} --dex --output=${project.file("build/outputs/fastdex/${variantName.toLowerCase()}/fastdex-runtime.dex")} ${project.file("build/intermediates/fastdex/${variantName}/classes.jar")}"

            def process = dxcmd.execute()
            int status = process.waitFor()
            process.destroy()
            if (status != 0) {
                throw new GradleException("generate fastdex runtime dex fail!")
            }
        }
        generateDexTask.dependsOn variant.assemble
    }
}
